/*
Tools – globally used mixins and functions. It’s important not to output any CSS in the first 2 layers
-- Mixins:
*/

// clearfix mixin: http://css-tricks.com/snippets/css/clear-fix/
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// breakpoint mixin
// @mixin breakpoint($breakpoint) {
//   @if (map-has-key($breakpoints, $breakpoint)) {
//
//     @if (map-has-key(map-get($breakpoints, $breakpoint), min-height)) {
//       @media (min-height: map-get(map-get($breakpoints, $breakpoint), min-height)){
//         @media (min-width: map-get(map-get($breakpoints, $breakpoint), width)) {
//           @content;
//         }
//       }
//     }
//     @else {
//       @media (min-width: map-get(map-get($breakpoints, $breakpoint), width)) {
//         @content;
//       }
//     }
//   }
//   @else {
//     @warn "Breakpoint: " + $breakpoint + " is not defined";
//   }
// }

@mixin high-dpi {
  @media  only screen and (-webkit-min-device-pixel-ratio: 1.3),
  only screen and (-o-min-device-pixel-ratio: 13/10),
  only screen and (min-resolution: 120dpi) {
    @content;
  }
}

// condition mixin
@mixin condition($condition) {
  .#{$condition} & {
    @content;
  }
}

// calc-em
@function calc-em($target-px, $context: 16px) {
  @return ($target-px / $context) * 1em;
}

//fluid type
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}
